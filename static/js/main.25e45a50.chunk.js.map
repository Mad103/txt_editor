{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/About.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","i","charAt","slice","join","navigator","clipboard","writeText","filter","element","About","myStyle","defaultProps","Alert","height","alert","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","cls","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.25e45a50.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    {/* yaha hmm dono a ya link use krr skte h but with a page must reload and with link page cannot reload.............means after clicking on this we will redirect to some other page corresponding to it */}\r\n                    {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"d-flex\">\r\n                    {/* <div className=\"bg-primary rounded mx-2\" onClick={() => {props.toggleMode('primary')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\r\n                    <div className=\"bg-success rounded mx-2\" onClick={() => {props.toggleMode('success')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\r\n                    <div className=\"bg-warning rounded mx-2\" onClick={() => {props.toggleMode('warning')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\r\n                    <div className=\"bg-danger rounded mx-2\" onClick={() => {props.toggleMode('danger')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\r\n                    <div className=\"bg-dark rounded mx-2\" onClick={() => {props.toggleMode('dark')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\r\n                    <div className=\"bg-light rounded mx-2\" onClick={() => {props.toggleMode('light')}} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div> */}\r\n                </div>\r\n                {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\"onClick={() => {props.toggleMode()}} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes  = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'About text here'\r\n}","import React, {useState} from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const[text, setText] = useState(\"\");\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n        // setText(\"You have clicked on handleupclick\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const handleFirstClick = () => {\r\n        let newText = text.toLowerCase().split(' ');\r\n        for (var i = 0; i < newText.length; i++) {\r\n          newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1); \r\n        }\r\n        // return str.join(' ');\r\n        setText(newText.join(' '));\r\n        props.showAlert(\"Titlecase enabled\", \"success\");\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n\r\n    }\r\n    const handleCopy = () => {\r\n        // var text = document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text copied\", \"success\");\r\n\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1 className=\"mb-4\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleFirstClick}>Convert First letter in Capital</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\S+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nexport default function About(props) {\r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'black',\r\n        backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white',\r\n        // border: '2px solid',\r\n        // borderColor: props.mode === 'dark'?'white':'black',\r\n    }\r\n\r\n    // const[myStyle, setMyStyle]= useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white',\r\n    // });\r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    // const toggleStyle = () => {\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white',\r\n    //         })\r\n    //         setBtnText(\"Enablke Light Mode\");\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white',\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\");\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2 className=\"my-2\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                <strong>Analyze Your text</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    Textutils gives you a way to analyze text quickly anf efficiently. Be it word count, character count or \r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                <strong>Free to use</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    Textutils is a free character counter tool that provides instant character count $ word count statistics for a given text. Textutils reports the number of words and characters, thus it is suitable for writing text with wird/ character limit.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browse Compatible</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, excel document, pdf document, essays etc.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>{btntext}</button>\r\n            </div> */}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //to fix layout\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\nimport Alert from './Components/Alert'\nimport React, { useState } from 'react';\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  }\n  from \"react-router-dom\"; \n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n      setAlert({\n        msg: message,\n        type: type\n      });\n      setTimeout(() => {\n        setAlert(null);\n      },1500);\n  };\n  // const removeBodyClasses = () => {\n  //   document.body.classList.remove('bg-light');\n  //   document.body.classList.remove('bg-dark');\n  //   document.body.classList.remove('bg-warning');\n  //   document.body.classList.remove('bg-success');\n  //   document.body.classList.remove('bg-primary');\n  //   document.body.classList.remove('bg-danger');\n  // }\n  const toggleMode = (cls) => {\n    // removeBodyClasses();\n    // console.log(cls);\n    // document.body.classList.add('bg-' + cls);\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    //yaha hmm ek hii tag return krra skte h....to ya to div bna ke yaa phir empty fragment\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          {/* agr hmm iss path pe jayenge to given component run hoga */}\n          <Route exact path=\"/about\">                     \n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} />\n          </Route>\n        </Switch> \n        </div>\n      </Router>\n    </>   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}